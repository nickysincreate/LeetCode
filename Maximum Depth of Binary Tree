# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    # def maxDepth(self, root):
    #     """
    #     :type root: TreeNode
    #     :rtype: int
    #     """
    #     # ## Recursive approach to sol.
    #     # if root == None:
    #     #     return 0
    #     # return max(self.maxDepth(root.left),self.maxDepth(root.right))+1
        
    #     ##appr 2 with recursion minor change
    #     if root is None:
    #         return 0 
    #     else :
    #     # Compute the depth of each subtree
    #         lDepth = maxDepth(root.left)
    #         rDepth = maxDepth(root.right)
    #     # Use the larger one
    #         if (lDepth > rDepth):
    #             return lDepth+1
    #         else:
    #             return rDepth+1
    
     def maxDepth(self, root):
            if root == None:
                return 0
            nodeStack = [root];
            depthStack = [1];
            maxDepth = 0;
            while len(nodeStack)>0:
                node = nodeStack.pop();
                depth = depthStack.pop();
                maxDepth = maxDepth if maxDepth > depth else depth
                if node.left != None:
                    nodeStack.append(node.left)
                    depthStack.append(depth+1)
                if node.right != None:
                    nodeStack.append(node.right)
                    depthStack.append(depth+1)
            return maxDepth
